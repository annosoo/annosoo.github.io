<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《python编程导论》要点整理</title>
      <link href="/2019/08/17/python/"/>
      <url>/2019/08/17/python/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计算机做两件事。执行计算和保存计算。<br><a id="more"></a></p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>对象和操作符可以组成表达式。</p><p>对象有两种类型。<br>标量对象:整数、实数、布尔值、None<br>非标量对象:字符串。有内部结构</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>python中变量只是名称<br>赋值语句将左边的名称与右边的对象关联。<br>对象可以和多个名称关联，也可以不关联。</p><p>变量可以包含大小写字母、数字、下划线。<br>不能以数字开头，不能用保留字。<br>变量大小写敏感。</p><p>python支持多重赋值。<br>赋值语句先对右边的每个表达式求值，然后和左边的变量名绑定。</p><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><p>操作符+ *被称为重载<br>‘a’ + ‘a’ 连接<br>n * ‘a’ 重复</p><p>操作符优先级。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串是序列类型之一。<br>len函数求字符串长度。<br>索引提取单个字符。<br>分片操作提取任意长度子串。s[start : end]表示从s中提取start开始，end-1结束的子串。</p><p>input参数为字符串。shell中作为提示信息，用户输入成为函数的返回值。</p><p>当print语句有多个参数时，会在每个参数对应的值之间加上空格。print(‘a’, ‘a’)<br>字符串连接后生成一个没有多余空格的字符串作为唯一参数。print(‘a’ + ‘a’)</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p># -<em>- coding utf-8 -</em>-</p><h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>需要程序多次做同一件事。</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p>ctrl + c 强制结束</p><p>用print语句测试</p><p>三引号之间的文本称为文档字符串，提供函数的规范。规范包括:假设和保证。假设是对实参的限制，保证是函数应当实现的功能。</p><p>help(abs) 查找帮助</p><h1 id="rang-函数"><a href="#rang-函数" class="headerlink" title="rang()函数"></a>rang()函数</h1><p>range(start, stop, step)<br>只有两个参数。<br>只有一个参数。<br>range(0, 3)和range(3)都生成序列0,1,2</p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>for循环配合in操作符也可以遍历字符串中的字符</p><p>break语句提前终止循环</p><h1 id="几种算法比较"><a href="#几种算法比较" class="headerlink" title="几种算法比较"></a>几种算法比较</h1><p>穷举法和二分法</p><p>比较两个浮点数，最好的做法是看是否足够接近，而不是是否相等。<br>float类型的值以浮点数的形式保存。采用二进制表示法。</p><p>牛顿-拉弗森法。也就逐次逼近。<br>如果guess是多项式p的根的近似值，那guess-p(guess)/p’(guess)就是一个更好的近似值。作为下一个猜测。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数。方便扩展和重用代码。<br>return语句只能用在函数体中。<br>函数被调用时，形参被绑定到实参。</p><p>位置参数。关键字参数。<br>关键字参数经常和默认参数值配合使用。</p><p>函数是一个黑盒。<br>分解和抽象。<br>分解▶结构化。<br>抽象▶隐藏细节。</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>自然数的阶乘函数是简单的递归定义。</p><p>斐波那契数列也是递归定义。</p><p>基本情形和递归情形。</p><p>回文字符串。一个字符串顺读和倒读一样。</p><p>全局变量global</p><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>模块是包含Python定义和语句的.py文件。</p><p>import M<br>from M import *</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>Python通过文件句柄处理文件<br>fh = open(fn, ‘w’) fn是文件名的字符串<br>fh = open(fn, ‘r’)<br>fh = open(fn, ‘a’)<br>fh.read()<br>fh.readline()<br>fh.readlines()<br>fh.write(s)<br>fh.writeLines(S)<br>fh.close()</p><h1 id="结构化类型"><a href="#结构化类型" class="headerlink" title="结构化类型"></a>结构化类型</h1><p>另外4种结构化类型。非变量对象。<br>tuple、list、range、dict</p><p>元组是一些元素的不可变有序序列。<br>包含1的单元素元组。(1, )<br>小括号用来分组表达式。</p><p>元组可以进行连接、索引、切片、重复、len()、in、not in、for遍历操作</p><p>多重赋值。提取序列中单个元素。</p><p>range最常用在for循环</p><p>列表、字典可变。<br>元组、字符串、范围不可变。</p><p>L.count(e)返回e在L中出现的次数<br>L.index(e)<br>L.insert(i, e)<br>L.remove(e)<br>L.pop(i)<br>L.sort()升序排列L中的元素<br>L.reverse()翻转L中的元素顺序<br>L.extend(L1)追加L1中的元素<br>L.append(e)追加对象e。保持原来的结构。</p><p>修改一个正在遍历的列表。<br>切片克隆。for e in L[:]<br>或者list(L)返回列表L的副本。<br>或者导入标准库模块。copy.deepcopy(L)</p><h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><p>将某种操作应用到序列中的每个元素上。<br>创建一个新的列表。<br>L = [x**2 for x in range(1, 7)]<br>for 从句前是操作。for从句生成序列。for从句后可再加限制条件。</p><h1 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h1><h1 id="内置高阶函数map和for循环配合使用。"><a href="#内置高阶函数map和for循环配合使用。" class="headerlink" title="内置高阶函数map和for循环配合使用。"></a>内置高阶函数map和for循环配合使用。</h1><p>map函数第一个参数是函数。第二个参数是有序集合。作为第一个参数的实参。<br>循环每次迭代返回一个值。</p><h1 id="匿名函数lambda"><a href="#匿名函数lambda" class="headerlink" title="匿名函数lambda"></a>匿名函数lambda</h1><p>lambda x, y : x ** y<br>返回一个函数。<br>常和map函数配合使用。</p><h1 id="元组和列表比较"><a href="#元组和列表比较" class="headerlink" title="元组和列表比较"></a>元组和列表比较</h1><p>元组相比列表，可以作为字典的键。</p><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><p>s.count(s1)返回s1在s中出现的次数<br>s.find(s1)<br>s.rfind(s1)<br>s.index(s1)<br>s.rindex(s1)<br>s.lower()大写字母转换成小写<br>s.replace(old, new)<br>s.rstrip()去掉s末尾的空白字符<br>s.split(d)用d作为分隔符拆分s。如省略，用任意空白字符拆分。</p><h1 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h1><p>空白字符包括:空格、制表符、换行符、回车、分页符</p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典是键/值对的集合。<br>用键对值进行索引。</p><p>for遍历字典。分给迭代变量的值是字典的键</p><p>字典键必须是可散列类型的对象。<br>不可变类型都是可散列。如元组。如用(flightNumber, day)表示航空公司的航班。作为字典的键。<br>可变类型都是不可散列。</p><h1 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h1><p>len(d)<br>d.keys()返回所有键的视图<br>d.values()返回所有值的视图<br>k in d<br>d[k]用键索引值<br>d.get(k, v)<br>d[k] = v<br>del d[k]<br>for k in d:遍历d中的键</p><h1 id="测试和调试"><a href="#测试和调试" class="headerlink" title="测试和调试"></a>测试和调试</h1><p>黑盒测试。基于规范探索路径<br>白盒测试。基于代码探索路</p><p>测试包括单元测试和集成测试。</p><p>调试是修复软件缺陷的过程。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常处理try-except-else-finally代码块</p><p>except后可接异常元组</p><p>抛出异常raise语句<br>raise exceptionName(arguments)<br>参数用来描述引发异常的原因</p><p>except exceptionName as msg:<br>     print(msg)<br>将msg绑定到抛出exceptionName时使用的参数。用于打印错误信息。</p><p>断言assert语句<br>assert Boolean expression<br>assert Boolean expression, argument<br>对布尔表达式求值。True向下执行。False抛出AssersionError异常。</p><h1 id="面向对象的设计思想"><a href="#面向对象的设计思想" class="headerlink" title="面向对象的设计思想"></a>面向对象的设计思想</h1><p>抽象出类，再根据类创建具体的实例</p><p>对象包含数据和操作数据的函数</p><h1 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h1><p>__init__方式用于初始化。</p><p>print命令会自动调用与待输出对象关联的<strong>str</strong>方法。</p><p>#<br>str类型的二元操作符 &lt;</p><p>多态方法的自动调用<br>#</p><p>class Person(Object):#定义类<br>    pass<br>p = Person()#创建类的实例<br>print(p)</p><p>类的内部定义访问数据的函数称为方法</p><p>方法可以直接在实例上调用</p><p>判断一个变量是否是某个类型或者该类型的父继承链<br>isinstance()</p><p>获取对象的所有属性dir()</p><p>len函数内部实际是调用该对象的<strong>len</strong>方法<br>len(str) 等价于 str.<strong>len</strong>()</p><h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><p>类名.类变量名<br>所有实例共享的变量<br>存在于类定义中，不在方法内。</p><h2 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h2><p>实例名.实例变量名<br>各个实例本身独有<br>存在于方法中</p><p>hasattr()判断属性是否存在<br>getattr()获取属性<br>setattr()设置属性</p><h1 id="类和实例的关系"><a href="#类和实例的关系" class="headerlink" title="类和实例的关系"></a>类和实例的关系</h1><p>实例创建后就可以自由绑定属性。动态绑定。</p><p>类是抽象，实例是具体</p><p>类的属性，所有实例均可调用。实例名作为参数传入形参self</p><p>子类继承父类属性，父类又叫基类、超类</p><p>python允许多重继承。一个子类可以继承多个父类属性<br>Mixin混入。组合不同类的功能</p><p>__slot__变量限制当前类能添加的属性</p><p>@property限制参数</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><p>计算复杂度指程序执行的基本步数</p><h1 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h1><p>搜索问题、排序问题</p><p>背包问题和图的最优化问题</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verilog初探</title>
      <link href="/2018/04/24/verilog%E5%88%9D%E6%8E%A2/"/>
      <url>/2018/04/24/verilog%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h1><p>构建硬件电路，无需ASIC（专用集成电路）相比微处理器内核 简单 快速 省电<br>相比ASIC和MCU：大量并行结构，可实现数字设计领域几乎所有功能<br><a id="more"></a></p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>善用 IP Core：原厂提供经过验证的IP内核  官方网站文档介绍<br>国际知名开源网站上的IP核：比如<a href="http://www.opencores.org" target="_blank" rel="noopener">www.opencores.org</a></p><p>代码规范：硬禾实战营Verilog代码规范</p><p>通过软核构成嵌入式系统</p><h1 id="实用参考资料"><a href="#实用参考资料" class="headerlink" title="实用参考资料"></a>实用参考资料</h1><p>傻瓜都能掌握的FPGA知识: FPGA for Dummies</p><p>美国大学的数字电路／Verilog教程（基于Digilent的板卡，使用的是Xilinx的</p><p>芯片）Introduction to Digital Design Using Digilent FPGA Boards</p><p>verilog PPT教程</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>数字电路三个基本部分：门(Gate) 寄存器(Register) 连线（Wire）</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Module name,Port list(optional,if there are ports)（模块名）</span><br><span class="line">Port declarations（端口声明）</span><br><span class="line">Parameter list</span><br><span class="line">Declaration of variables(wires,reg,integer etc.)（变量声明）</span><br><span class="line">Instantiation of inner (lower-level) modules(底层模块)</span><br><span class="line">Structural statements（结构性语句）</span><br><span class="line">Procedural blocks（程序块）</span><br><span class="line">endmodule declarations（结束声明）</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Comment</span><br><span class="line"></span><br><span class="line">/*These comments extend</span><br><span class="line">over multiple lines. Good</span><br><span class="line">for commenting out code*/</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="wire"><a href="#wire" class="headerlink" title="wire"></a>wire</h3><p>代表硬件元素之间的连接。 默认1位值，除非声明为位矢 默认高阻Z</p><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❑ wire a;</span><br><span class="line">❑ wire b, c;</span><br><span class="line">❑ wire d=1’b0;//1位二进制的0</span><br></pre></td></tr></table></figure><h3 id="reg"><a href="#reg" class="headerlink" title="reg"></a>reg</h3><p>数据存储元件，保留值直到下次赋值。 默认值不定X</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg reset;</span><br><span class="line">initial</span><br><span class="line">begin</span><br><span class="line">reset = 1’b1;</span><br><span class="line">#100 reset=1’b0;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="vectors"><a href="#vectors" class="headerlink" title="vectors"></a>vectors</h3><p>位矢<br>wire/reg [msb_index : lsb_index] data_id;</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wire a;</span><br><span class="line">wire [7:0] bus;</span><br><span class="line">wire [31:0] busA, busB, busC;</span><br><span class="line">reg clock;</span><br><span class="line">reg [0:40] virtual_addr;</span><br></pre></td></tr></table></figure><h3 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h3><p>整数（有符号） 类似寄存器的位矢（无符号）</p><h4 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples:"></a>Examples:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">integer counter;</span><br><span class="line">initial</span><br><span class="line">counter = -1;</span><br></pre></td></tr></table></figure><h3 id="real"><a href="#real" class="headerlink" title="real"></a>real</h3><p>实型变量 默认值0 不能范围声明 </p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">real delta;</span><br><span class="line">initial</span><br><span class="line">begin</span><br><span class="line">delta=4e10;</span><br><span class="line">delta=2.13;</span><br><span class="line">end</span><br><span class="line">integer i;</span><br><span class="line">initial</span><br><span class="line">i = delta; // i gets the value 2 (rounded value of 2.13)</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>用来存储仿真时间的值<br>time save_sim_time;<br>initial<br>save_sim_time = $time;<br>arrays 数组（只限一维）支持 reg integer time</p><p>&lt;data_type&gt; &lt;var_name&gt;[start_idx : end_idx];</p><p>####Examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">integer count[0:7];</span><br><span class="line">reg bool[31:0];</span><br><span class="line">time chk_point[1:100];</span><br><span class="line">reg [4:0] port_id[0:7];</span><br><span class="line">integer matrix[4:0][4:0]; // illegal</span><br></pre></td></tr></table></figure></p><h2 id="数据值"><a href="#数据值" class="headerlink" title="数据值"></a>数据值</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>Value of 23:<br>5’b10111 // Binary<br>5’d23 // Decimal<br>5’h17 // Hex</p><h3 id="常数"><a href="#常数" class="headerlink" title="常数"></a>常数</h3><p>wire [3:0] t,d;<br>assign t = 23;<br>assign d= 4’b0111;</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>parameter n=4;<br>wire [n-1:0] t, d;</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="算术"><a href="#算术" class="headerlink" title="算术"></a>算术</h3><p>*,+,-, /,%</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>&lt;,&lt;=,&gt;,&gt;=,==, !=</p><h3 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h3><p>• Not: ~<br>• XOR: ^<br>• And : &amp; 5’b11001 &amp; 5’b01101 ==&gt;<br>5’b01001<br>• OR: |<br>• XNOR: ~^ or ^~</p><h3 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h3><p>• ! : Not<br>• &amp;&amp; : AND 27 &amp;&amp; -3 ==&gt; 1<br>• || : OR</p><h3 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h3><p>Shift Left: &lt;&lt;<br>Shift right: &gt;&gt;</p><h2 id="结构上和程序上"><a href="#结构上和程序上" class="headerlink" title="结构上和程序上"></a>结构上和程序上</h2><h3 id="结构上"><a href="#结构上" class="headerlink" title="结构上:"></a>结构上:</h3><p>电路的文本描述<br>顺序不重要（并行）<br>以assign语句开始</p><h3 id="程序上"><a href="#程序上" class="headerlink" title="程序上:"></a>程序上:</h3><p>类似C<br>有顺序（顺行）<br>以initial或者always语句开始</p><h4 id="阻塞和非阻塞赋值"><a href="#阻塞和非阻塞赋值" class="headerlink" title="阻塞和非阻塞赋值"></a>阻塞和非阻塞赋值</h4><p>阻塞:类似C   “=”<br>当前赋值结束后才进行下一次赋值<br>用于combinational logic（组合逻辑）<br>非阻塞：        “&lt;=”<br>触发条件来临之前不发生改变<br>用于（触发器，锁存器和寄存器）</p><h4 id="if-case-loop语句"><a href="#if-case-loop语句" class="headerlink" title="if,case,loop语句"></a>if,case,loop语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">If Statements </span><br><span class="line">if-else if-else</span><br><span class="line"></span><br><span class="line">Case Statements </span><br><span class="line">case-case1,...-endcase</span><br><span class="line"></span><br><span class="line">For Loops</span><br><span class="line">for</span><br></pre></td></tr></table></figure><h4 id="触发器Flip-Flops"><a href="#触发器Flip-Flops" class="headerlink" title="触发器Flip-Flops"></a>触发器Flip-Flops</h4><h5 id="简单D触发"><a href="#简单D触发" class="headerlink" title="简单D触发"></a>简单D触发</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alway@(posedge clk)    --clk上升沿</span><br><span class="line">begin</span><br><span class="line">  a&lt;=b&amp;c;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="带异步复位的D触发"><a href="#带异步复位的D触发" class="headerlink" title="带异步复位的D触发"></a>带异步复位的D触发</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">always@(posedge clk or negedge rst)</span><br><span class="line">begin</span><br><span class="line">  if(!rst) a&lt;=0;</span><br><span class="line">  else a&lt;=b;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="带同步重置和使能端的D触发"><a href="#带同步重置和使能端的D触发" class="headerlink" title="带同步重置和使能端的D触发"></a>带同步重置和使能端的D触发</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">always@(posedge clk)</span><br><span class="line">begin</span><br><span class="line">  if（rst) a&lt;=0;</span><br><span class="line">  else if(enable)a&lt;=b;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="移位寄存器"><a href="#移位寄存器" class="headerlink" title="移位寄存器"></a>移位寄存器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">reg[3:0] Q;</span><br><span class="line">always@(posedge clk or posedge rset)</span><br><span class="line">begin</span><br><span class="line">  if(rset)Q&lt;=0;</span><br><span class="line">  else </span><br><span class="line">   Q&lt;=Q&lt;&lt;1; --循环左移1位</span><br><span class="line">   Q[0]&lt;=Q[3]; </span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="多路器"><a href="#多路器" class="headerlink" title="多路器"></a>多路器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">法1:assign a=(select?b:c) </span><br><span class="line">法2:if</span><br><span class="line">法3:case</span><br></pre></td></tr></table></figure><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">reg [7:0]count;--存储数据</span><br><span class="line">wire enable;--信号控制变化</span><br><span class="line">always@(posedge clk or negedge rst)</span><br><span class="line">begin</span><br><span class="line">  if(rst)count&lt;=0;</span><br><span class="line">  else if(enable)</span><br><span class="line">    count&lt;=count+1;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="有限状态机Finite-State-Machines"><a href="#有限状态机Finite-State-Machines" class="headerlink" title="有限状态机Finite State Machines"></a>有限状态机Finite State Machines</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// state flip-flops</span><br><span class="line">reg [2:0] state, nxt_st;</span><br><span class="line">// state definitions</span><br><span class="line">parameter reset=0,S1=1,S2=2,S3=3,..</span><br><span class="line"></span><br><span class="line">// REGISTER DEFINITION</span><br><span class="line">always@(posedge clk)</span><br><span class="line">begin</span><br><span class="line">state&lt;=nxt_st;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">// OUTPUT CALCULATIONS</span><br><span class="line">output= f(state, inputs)</span><br><span class="line"></span><br><span class="line">// NEXT STATE CALCULATIONS</span><br><span class="line">always@(state or inputs or ...)</span><br><span class="line">begin</span><br><span class="line">…</span><br><span class="line">nxt_st= ...</span><br><span class="line">…</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="标准的文件头"><a href="#标准的文件头" class="headerlink" title="标准的文件头"></a>标准的文件头</h3><p>作者名，模块名，创建日期，概要，更改记录，版权等必要信息。 统一使用以下的文件头：其中*为必需的项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//********************************************************</span><br><span class="line">//</span><br><span class="line">//   Copyright(c)2016, ECBC </span><br><span class="line">//   All rights reserved</span><br><span class="line">//</span><br><span class="line">//   File name       :   MODULE_NAME.v</span><br><span class="line">//   Module name     :   MODULE_NAME</span><br><span class="line">//   Author          :   STEP</span><br><span class="line">//   Description     ：  </span><br><span class="line">//   Email           :   Author’s email</span><br><span class="line">//   Data            :   2016/08/01</span><br><span class="line">//   Version         :   current version, just this: v1.0</span><br><span class="line">//</span><br><span class="line">//   Abstract        :   </span><br><span class="line">//</span><br><span class="line">//   Modification history</span><br><span class="line">//   ----------------------------------------------------------------------------</span><br><span class="line">// Version       Data(2016/08/01)   V1.0</span><br><span class="line">// Description</span><br><span class="line">//</span><br><span class="line">//*************************************************************</span><br></pre></td></tr></table></figure></p><h3 id="标准的module格式"><a href="#标准的module格式" class="headerlink" title="标准的module格式"></a>标准的module格式</h3><p>模块名、模块例化名统一，例化名前加大写U_以区分 （ 多次例化另加标识 ），三者关系：<br>文件名 ：xxx .v (小写)<br>模块名 ：XXX （大写）<br>例化名 ：U_XXX (大写)<br>IP 内部所有的模块名都要加IP名或者IP名简称作前缀，如USB_CTRL、USB_TX_FIFO。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// *****************************</span><br><span class="line">//  DEFINE MODULE PORT  //</span><br><span class="line">// ******************************</span><br><span class="line">//</span><br><span class="line">module  MODULE_NAME  //模块名一行</span><br><span class="line">(  //括号顶格，端口部分换行</span><br><span class="line">// INPUT  //尽量先输入，后输出定义</span><br><span class="line">input_port_1, //可同时按接口对象等分类，一行一个</span><br><span class="line">…</span><br><span class="line">input_port_m, </span><br><span class="line"> </span><br><span class="line">// OUTPUT</span><br><span class="line">output_port_1,</span><br><span class="line">…</span><br><span class="line">output_port_m, </span><br><span class="line">);</span><br><span class="line">// *****************************</span><br><span class="line">//  DEFINE PARAMETER  </span><br><span class="line">// ******************************</span><br><span class="line">parameter… //参数名采用大写</span><br><span class="line"> </span><br><span class="line">// ******************************</span><br><span class="line">// DEFINE INPUT</span><br><span class="line">// ******************************</span><br><span class="line">inputrst_n   ;    // reset, (active low) .//input到寄存器名之间四个tab键，注意对齐</span><br><span class="line">inputclk_*   ;    // clock signal , 50M .//注意注释的格式，简洁有力，尽量使用英文</span><br><span class="line">input  [n:0]        a_din   ;    // *****//此处是在模块名部分没有声明端口类型时用</span><br><span class="line">input  [k:0]        b_din   ;    // *****//注释尽量不要挨到前面，然后全左对齐</span><br><span class="line"> </span><br><span class="line">// ******************************</span><br><span class="line">// DEFINE OUTPUT  </span><br><span class="line">// ******************************</span><br><span class="line">output  [m:0]    a_dout   ;    // *****//位宽定义和output之间加一个tab或空格，统一即可</span><br><span class="line">output  [i:0]    b_dout   ;    // *****</span><br><span class="line"> </span><br><span class="line">// ******************************</span><br><span class="line">// OUTPUT ATRRIBUTE  </span><br><span class="line">// ******************************</span><br><span class="line">// REGS</span><br><span class="line">reg   [m:0]    a_dout   ;     // *****</span><br><span class="line">//WIRES</span><br><span class="line">wire  [i:0]     b_dout   ;     // *****</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">// ******************************</span><br><span class="line">// INSTSNCE MODULE   </span><br><span class="line">// ******************************</span><br><span class="line">MODULE_NAME_A  U_MODULE_NAME_A(//例化名从和模块名相距四个tab，括号后换行</span><br><span class="line">.A(A),//端口和例化名对齐，后3个tab再括号连线</span><br><span class="line">.B(B),//括号内3个tab的宽度，全对齐</span><br><span class="line">.C(C),</span><br><span class="line">); …</span><br><span class="line"> </span><br><span class="line">// ******************************</span><br><span class="line">//MAIN CODE  </span><br><span class="line">// ******************************</span><br><span class="line">… …</span><br><span class="line">… …</span><br><span class="line">… …</span><br><span class="line">// ******************************  //</span><br><span class="line">endmodule//结尾顶格，中间部分均从一个tab开始</span><br></pre></td></tr></table></figure></p><h3 id="一致的排版"><a href="#一致的排版" class="headerlink" title="一致的排版"></a>一致的排版</h3><p>//统一的缩排取4个空格宽度<br>    //输入输出信号的宽度定义与关键字之间，信号名与宽度之间要用tab分开；所有宽度定义对所有信号名对齐，代码风格统一如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input   [3:0]   input_a  ;    // *****</span><br><span class="line">inputinput_b  ;    // *****</span><br><span class="line">   …</span><br><span class="line">output  [128:0] output_a ;</span><br><span class="line">output  [15:0]  output_b ;</span><br><span class="line">outputoutput_c ;</span><br></pre></td></tr></table></figure></p><h3 id="一致的-begin-end-书写方式"><a href="#一致的-begin-end-书写方式" class="headerlink" title="一致的 begin end 书写方式"></a>一致的 begin end 书写方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//always 中，一定要用begin end 区分，格式和代码风格统一如下：</span><br><span class="line">always @ (postedge clk or negedge rst_n）</span><br><span class="line">begin</span><br><span class="line">if (rst_n==1’b0)</span><br><span class="line">syn_rst&lt;= ‘DLY 1’b0;</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">if (a==b)</span><br><span class="line">syn_rst&lt;= ‘DLY 1’b1;</span><br><span class="line">else</span><br><span class="line">syn_rst&lt;= ‘DLY 1’b0;</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">//if else 中仅有一个语句行时，不要使用begin end; 如果有多个语句行时，begin end和if （）或else （）空四个格。格式如下：</span><br><span class="line">if  (…)</span><br><span class="line">…</span><br><span class="line">else if (…)</span><br><span class="line">else </span><br><span class="line">//********************************************************************</span><br><span class="line"> </span><br><span class="line">if  (…)</span><br><span class="line">…</span><br><span class="line">else if (…)</span><br><span class="line">    begin</span><br><span class="line">…</span><br><span class="line">…(</span><br><span class="line">    end</span><br><span class="line">else</span><br></pre></td></tr></table></figure><h3 id="一致的信号命名风格"><a href="#一致的信号命名风格" class="headerlink" title="一致的信号命名风格"></a>一致的信号命名风格</h3><p>简洁，清晰，有效是基本的信号命名规则，详见命名规范。<br>全称    缩写    中文含义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">acknowledgeack应答</span><br><span class="line">adressaddr(ad)地址</span><br><span class="line">arbiterarb仲裁</span><br><span class="line">checkchk校验，如CRC校验</span><br><span class="line">clockclk时钟</span><br><span class="line">configcfgConfiguration,装置</span><br><span class="line">controlctrl控制</span><br><span class="line">countcnt计数</span><br><span class="line">data indin(di)数据输入</span><br><span class="line">data outdout(do)数据输出</span><br><span class="line">decodede译码</span><br><span class="line">decreasedec减一</span><br><span class="line">delaydly</span><br><span class="line">disabledis不使能</span><br><span class="line">errorerr错误（指示）</span><br><span class="line">enableen使能</span><br><span class="line">framefrm帧</span><br><span class="line">generategen生成，如CRC生成</span><br><span class="line">grantgnt申请通过</span><br><span class="line">increaseinc加一</span><br><span class="line">inputin(i)</span><br><span class="line">lengthlen（帧、包）长</span><br><span class="line">nmportnm网管相关</span><br><span class="line">outputout(o)</span><br><span class="line">packet不推荐packetpkt与帧相同</span><br><span class="line">prioritypri优先级</span><br><span class="line">pointerptr指针</span><br><span class="line">rd enableren读使能</span><br><span class="line">readrd读（操作）</span><br><span class="line">readyrdy应答信号或准备好</span><br><span class="line">receiverx（帧数据）接收</span><br><span class="line">requestreq（服务、仲裁）请求</span><br><span class="line">resetrst</span><br><span class="line">segmentseg</span><br><span class="line">soucescr源（端口）</span><br><span class="line">ststisticsstat统计</span><br><span class="line">timertmr定时器</span><br><span class="line">switchersfSwitch fabric</span><br><span class="line">temporarytmp临时</span><br><span class="line">transmittx发送（帧数据）相关</span><br><span class="line">Validvld(v)有效、校验正确</span><br><span class="line">wr enablewen写使能</span><br><span class="line">writewr写操作</span><br><span class="line">a.端口、信号、变量名的所有字母小写：函数名、宏定义、参数定义用大写 </span><br><span class="line">b.使用简称、缩略词（加上列表） </span><br><span class="line">c.基于含义命名（避免以数字命名的简单做法），含义可分段（最多分三段），每一小段之间加下划线”_”,如tx_data_val;命名长度一般限制在20个字符以内。 </span><br><span class="line">d.低电平有效信号，加后缀”_n”,如 rst_n </span><br><span class="line">e.无条件寄存的寄存信号在原信号上加ff1、ff2… 如原信号 data_in, 寄存一拍data_in_ff1,寄存两拍data_in_ff2 </span><br><span class="line">f.不能用 ”reg”,作为最后的后缀名，因为综合工具会给寄存器自动加上_reg, 如果命名里就用_reg作为后缀名则扰乱了网表的可读性。</span><br></pre></td></tr></table></figure></p><h3 id="模板示例"><a href="#模板示例" class="headerlink" title="模板示例"></a><strong><em>模板示例</em></strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">//********************************************************</span><br><span class="line">//</span><br><span class="line">//   Copyright(c)2016, ECBC </span><br><span class="line">//   All rights reserved</span><br><span class="line">//</span><br><span class="line">//   File name       :   MODULE_NAME.v</span><br><span class="line">//   Module name     :   MODULE_NAME</span><br><span class="line">//   Author          :   STEP</span><br><span class="line">// Description ：  </span><br><span class="line">//   Email           :   Author’s email</span><br><span class="line">//   Data            :   2016/08/01</span><br><span class="line">//   Version         :   current version, just this: v1.0</span><br><span class="line">//</span><br><span class="line">//   Abstract        :   </span><br><span class="line">//</span><br><span class="line">//   Modification history</span><br><span class="line">//   ----------------------------------------------------------------------------</span><br><span class="line">// Version       Data(2016/08/01)   V1.0</span><br><span class="line">// Description</span><br><span class="line">//</span><br><span class="line">//*************************************************************</span><br><span class="line">//*******************</span><br><span class="line">//DEFINE(s)</span><br><span class="line">//*******************</span><br><span class="line"> </span><br><span class="line">//*******************</span><br><span class="line">//DEFINE(s)</span><br><span class="line">//*******************</span><br><span class="line">//`define UDLY 1    //Unit delay, for non-blocking assignments in sequential logic</span><br><span class="line"> </span><br><span class="line">//*******************</span><br><span class="line">//DEFINE MODULE PORT</span><br><span class="line">//*******************</span><br><span class="line">module MODULE_NAME</span><br><span class="line">(</span><br><span class="line">//INPUT</span><br><span class="line">rest_n         ,</span><br><span class="line">clk_*          ,</span><br><span class="line">a_din          ,</span><br><span class="line">b_din          ,</span><br><span class="line"> </span><br><span class="line">//OUTPUT</span><br><span class="line">a_dout         ,</span><br><span class="line">b_dout</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">//*******************</span><br><span class="line">//DEFINE PARAMETER</span><br><span class="line">//*******************</span><br><span class="line">parameterT1S=24_999_999;</span><br><span class="line"> </span><br><span class="line">//*******************</span><br><span class="line">//DEFINE INPUT</span><br><span class="line">//*******************</span><br><span class="line">input             rst_n;    //reset, active low .</span><br><span class="line">input             clk_*;    //clock signal, 50M .</span><br><span class="line">input  [n:0]a_din;    //*****</span><br><span class="line">input  [k:0]       b_din;    //*****</span><br><span class="line"> </span><br><span class="line">//*******************</span><br><span class="line">//DEFINE OUTPUT</span><br><span class="line">//*******************</span><br><span class="line">output  [m:0]    a_dout      ;    //*****</span><br><span class="line">output  [i:0]     b_dout      ;    //*****</span><br><span class="line"> </span><br><span class="line">//********************</span><br><span class="line">//OUTPUT ATTRIBUTE</span><br><span class="line">//********************</span><br><span class="line">//REGS</span><br><span class="line">reg   [m:0]     a_dout;    //*****</span><br><span class="line"> </span><br><span class="line">//WIRES</span><br><span class="line">wire  [i:0]      b_dout;    //*****</span><br><span class="line"> </span><br><span class="line">//*********************</span><br><span class="line">//INNER SIGNAL DECLARATION</span><br><span class="line">//*********************</span><br><span class="line">//REGS</span><br><span class="line">reg   [3:0]       counter     ;    //*****</span><br><span class="line"> </span><br><span class="line">//WIRES</span><br><span class="line">wire  [7:0]       temp1;    //*****</span><br><span class="line"> </span><br><span class="line">//*********************</span><br><span class="line">//INSTANTCE MODULE</span><br><span class="line">//*********************</span><br><span class="line"> </span><br><span class="line">//**************************************************************</span><br><span class="line">//instance of module MODULE_NAME_A filename:module_name_a.v</span><br><span class="line">//**************************************************************</span><br><span class="line">MODULE_NAME_A  U_MUDULE_NAME_A(</span><br><span class="line">.A(A),</span><br><span class="line">.B(B),</span><br><span class="line">.C(C)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">//*********************</span><br><span class="line">//MAIN CORE</span><br><span class="line">//*********************</span><br><span class="line"> </span><br><span class="line">//Sequential logic style</span><br><span class="line">always@(posedge clk_* or negedge rest_n)</span><br><span class="line">begin : SEQ_BLOCK_NAME</span><br><span class="line">if (rst_n==1’b0)</span><br><span class="line">counter&lt;=4’b0;</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">if (expression)</span><br><span class="line">counter &lt;= #`DLY siginal_b;</span><br><span class="line">else;</span><br><span class="line">end</span><br><span class="line">end // SEQ_BLOCK_NAME</span><br><span class="line"> </span><br><span class="line">//Combinational logic style</span><br><span class="line">always@(signal_a or signal_b)</span><br><span class="line">begin:COM_BLOCK-NAME</span><br><span class="line">case (expression)</span><br><span class="line">item1    :begin</span><br><span class="line"> signal_c=*****;</span><br><span class="line">  end</span><br><span class="line">item2    : //statement;</span><br><span class="line">default   ://statement;</span><br><span class="line">endcase</span><br><span class="line">end // COM_BLOCK_NAME</span><br><span class="line"> </span><br><span class="line">assignout= expression ? (1’b0):(1’b1);</span><br><span class="line"> </span><br><span class="line">//*********************</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fpga </category>
          
          <category> verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> verilog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
